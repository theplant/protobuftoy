// Code generated by protoc-gen-go.
// source: test.proto
// DO NOT EDIT!

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	SearchRequest
	SearchResponse
	SearchError
	Result
	AccountInfo
	GetAccountInfoParams
	LoginParams
	LoginResult
*/
package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SearchRequest struct {
	Query         string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	PageNumber    int32  `protobuf:"varint,2,opt,name=page_number,json=pageNumber" json:"page_number,omitempty"`
	ResultPerPage int32  `protobuf:"varint,3,opt,name=result_per_page,json=resultPerPage" json:"result_per_page,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchRequest) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *SearchRequest) GetResultPerPage() int32 {
	if m != nil {
		return m.ResultPerPage
	}
	return 0
}

type SearchResponse struct {
	Result []*Result `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SearchResponse) GetResult() []*Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type SearchError struct {
	Field      string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	ErrorCount int32  `protobuf:"varint,2,opt,name=error_count,json=errorCount" json:"error_count,omitempty"`
}

func (m *SearchError) Reset()                    { *m = SearchError{} }
func (m *SearchError) String() string            { return proto.CompactTextString(m) }
func (*SearchError) ProtoMessage()               {}
func (*SearchError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchError) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *SearchError) GetErrorCount() int32 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

type Result struct {
	Url            string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Title          string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Snippets       string `protobuf:"bytes,3,opt,name=snippets" json:"snippets,omitempty"`
	SomeSnakedName int32  `protobuf:"varint,4,opt,name=some_snaked_name,json=someSnakedName" json:"some_snaked_name,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Result) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Result) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Result) GetSnippets() string {
	if m != nil {
		return m.Snippets
	}
	return ""
}

func (m *Result) GetSomeSnakedName() int32 {
	if m != nil {
		return m.SomeSnakedName
	}
	return 0
}

type AccountInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AccountInfo) Reset()                    { *m = AccountInfo{} }
func (m *AccountInfo) String() string            { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()               {}
func (*AccountInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AccountInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetAccountInfoParams struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetAccountInfoParams) Reset()                    { *m = GetAccountInfoParams{} }
func (m *GetAccountInfoParams) String() string            { return proto.CompactTextString(m) }
func (*GetAccountInfoParams) ProtoMessage()               {}
func (*GetAccountInfoParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetAccountInfoParams) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type LoginParams struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginParams) Reset()                    { *m = LoginParams{} }
func (m *LoginParams) String() string            { return proto.CompactTextString(m) }
func (*LoginParams) ProtoMessage()               {}
func (*LoginParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LoginParams) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginParams) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResult struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *LoginResult) Reset()                    { *m = LoginResult{} }
func (m *LoginResult) String() string            { return proto.CompactTextString(m) }
func (*LoginResult) ProtoMessage()               {}
func (*LoginResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LoginResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*SearchRequest)(nil), "example.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "example.SearchResponse")
	proto.RegisterType((*SearchError)(nil), "example.SearchError")
	proto.RegisterType((*Result)(nil), "example.Result")
	proto.RegisterType((*AccountInfo)(nil), "example.AccountInfo")
	proto.RegisterType((*GetAccountInfoParams)(nil), "example.GetAccountInfoParams")
	proto.RegisterType((*LoginParams)(nil), "example.LoginParams")
	proto.RegisterType((*LoginResult)(nil), "example.LoginResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SearchService service

type SearchServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchAlt(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchReturnError(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchValidateError(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchReturnNil(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchWithUnexpectedError(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type searchServiceClient struct {
	cc *grpc.ClientConn
}

func NewSearchServiceClient(cc *grpc.ClientConn) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/example.SearchService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchAlt(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/example.SearchService/SearchAlt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchReturnError(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/example.SearchService/SearchReturnError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchValidateError(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/example.SearchService/SearchValidateError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchReturnNil(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/example.SearchService/SearchReturnNil", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchWithUnexpectedError(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/example.SearchService/SearchWithUnexpectedError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchService service

type SearchServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	SearchAlt(context.Context, *SearchRequest) (*SearchResponse, error)
	SearchReturnError(context.Context, *SearchRequest) (*SearchResponse, error)
	SearchValidateError(context.Context, *SearchRequest) (*SearchResponse, error)
	SearchReturnNil(context.Context, *SearchRequest) (*SearchResponse, error)
	SearchWithUnexpectedError(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterSearchServiceServer(s *grpc.Server, srv SearchServiceServer) {
	s.RegisterService(&_SearchService_serviceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.SearchService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchAlt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchAlt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.SearchService/SearchAlt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchAlt(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchReturnError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchReturnError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.SearchService/SearchReturnError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchReturnError(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchValidateError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchValidateError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.SearchService/SearchValidateError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchValidateError(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchReturnNil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchReturnNil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.SearchService/SearchReturnNil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchReturnNil(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchWithUnexpectedError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchWithUnexpectedError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.SearchService/SearchWithUnexpectedError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchWithUnexpectedError(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchService_Search_Handler,
		},
		{
			MethodName: "SearchAlt",
			Handler:    _SearchService_SearchAlt_Handler,
		},
		{
			MethodName: "SearchReturnError",
			Handler:    _SearchService_SearchReturnError_Handler,
		},
		{
			MethodName: "SearchValidateError",
			Handler:    _SearchService_SearchValidateError_Handler,
		},
		{
			MethodName: "SearchReturnNil",
			Handler:    _SearchService_SearchReturnNil_Handler,
		},
		{
			MethodName: "SearchWithUnexpectedError",
			Handler:    _SearchService_SearchWithUnexpectedError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

// Client API for AccountService service

type AccountServiceClient interface {
	GetAccountInfo(ctx context.Context, in *GetAccountInfoParams, opts ...grpc.CallOption) (*AccountInfo, error)
}

type accountServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountServiceClient(cc *grpc.ClientConn) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoParams, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := grpc.Invoke(ctx, "/example.AccountService/GetAccountInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceServer interface {
	GetAccountInfo(context.Context, *GetAccountInfoParams) (*AccountInfo, error)
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AccountService/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountInfo(ctx, req.(*GetAccountInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountInfo",
			Handler:    _AccountService_GetAccountInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

// Client API for AuthService service

type AuthServiceClient interface {
	Login(ctx context.Context, in *LoginParams, opts ...grpc.CallOption) (*LoginResult, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginParams, opts ...grpc.CallOption) (*LoginResult, error) {
	out := new(LoginResult)
	err := grpc.Invoke(ctx, "/example.AuthService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	Login(context.Context, *LoginParams) (*LoginResult, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x95, 0xa6, 0x09, 0xcd, 0x58, 0x4d, 0xca, 0x12, 0x95, 0x10, 0x09, 0x11, 0x2c, 0x51,
	0x72, 0xca, 0x21, 0x3d, 0x55, 0xe2, 0x92, 0xd2, 0x80, 0x90, 0xaa, 0x28, 0x72, 0x04, 0x3d, 0x5a,
	0x5b, 0x7b, 0x9a, 0xae, 0xb0, 0xd7, 0xee, 0xfe, 0x29, 0xe5, 0x1b, 0xf1, 0x31, 0xd1, 0xfe, 0xb1,
	0x71, 0x81, 0x4b, 0x7a, 0xf3, 0xfc, 0x66, 0xe6, 0xed, 0xdb, 0xec, 0x53, 0x00, 0x14, 0x4a, 0x35,
	0x2b, 0x45, 0xa1, 0x0a, 0xf2, 0x0c, 0x1f, 0x68, 0x5e, 0x66, 0x18, 0x72, 0x38, 0xdc, 0x20, 0x15,
	0xc9, 0x6d, 0x84, 0x77, 0x1a, 0xa5, 0x22, 0x43, 0xe8, 0xdc, 0x69, 0x14, 0x3f, 0x47, 0xad, 0x49,
	0x6b, 0xda, 0x8b, 0x5c, 0x41, 0xde, 0x40, 0x50, 0xd2, 0x2d, 0xc6, 0x5c, 0xe7, 0xd7, 0x28, 0x46,
	0x7b, 0x93, 0xd6, 0xb4, 0x13, 0x81, 0x41, 0x2b, 0x4b, 0xc8, 0x09, 0x0c, 0x04, 0x4a, 0x9d, 0xa9,
	0xb8, 0x44, 0x11, 0x9b, 0xc6, 0xa8, 0x6d, 0x87, 0x0e, 0x1d, 0x5e, 0xa3, 0x58, 0xd3, 0x2d, 0x86,
	0x67, 0xd0, 0xaf, 0xce, 0x93, 0x65, 0xc1, 0x25, 0x92, 0xf7, 0xd0, 0x75, 0x23, 0xa3, 0xd6, 0xa4,
	0x3d, 0x0d, 0xe6, 0x83, 0x99, 0xf7, 0x36, 0x8b, 0x2c, 0x8e, 0x7c, 0x3b, 0xbc, 0x80, 0xc0, 0xad,
	0x2e, 0x85, 0x28, 0x84, 0x31, 0x7a, 0xc3, 0x30, 0x4b, 0x2b, 0xa3, 0xb6, 0x30, 0x46, 0xd1, 0xb4,
	0xe3, 0xa4, 0xd0, 0x5c, 0x55, 0x46, 0x2d, 0xfa, 0x68, 0x48, 0x78, 0x0f, 0x5d, 0xa7, 0x4b, 0x8e,
	0xa0, 0xad, 0x45, 0xe6, 0xd7, 0xcd, 0xa7, 0x91, 0x54, 0x4c, 0x65, 0x68, 0xd7, 0x7a, 0x91, 0x2b,
	0xc8, 0x18, 0x0e, 0x24, 0x67, 0x65, 0x89, 0x4a, 0xda, 0x3b, 0xf5, 0xa2, 0xba, 0x26, 0x53, 0x38,
	0x92, 0x45, 0x8e, 0xb1, 0xe4, 0xf4, 0x3b, 0xa6, 0x31, 0xa7, 0x39, 0x8e, 0xf6, 0xed, 0x99, 0x7d,
	0xc3, 0x37, 0x16, 0xaf, 0x68, 0x8e, 0xe1, 0x5b, 0x08, 0x16, 0x89, 0x35, 0xf5, 0x85, 0xdf, 0x14,
	0x84, 0xc0, 0xbe, 0x1d, 0x76, 0xa7, 0xdb, 0xef, 0xf0, 0x04, 0x86, 0x9f, 0x51, 0x35, 0xa6, 0xd6,
	0x54, 0xd0, 0x5c, 0x92, 0x3e, 0xec, 0xb1, 0xea, 0x9a, 0x7b, 0x2c, 0x0d, 0x97, 0x10, 0x5c, 0x16,
	0x5b, 0xc6, 0x7d, 0x7b, 0x0c, 0x07, 0x5a, 0xa2, 0x68, 0xc8, 0xd5, 0xb5, 0xe9, 0x95, 0x54, 0xca,
	0x1f, 0x85, 0x48, 0xfd, 0xa5, 0xea, 0x3a, 0x7c, 0xe7, 0x65, 0xfc, 0xcf, 0x71, 0x0c, 0x5d, 0xa9,
	0xa8, 0xd2, 0xd2, 0x8b, 0xf8, 0x6a, 0xfe, 0xab, 0x5d, 0x45, 0x64, 0x83, 0xe2, 0x9e, 0x25, 0x48,
	0xce, 0xa0, 0xeb, 0x00, 0x39, 0xae, 0xdf, 0xea, 0x51, 0x88, 0xc6, 0x2f, 0xff, 0xe1, 0xfe, 0xb1,
	0x3f, 0x40, 0xcf, 0x91, 0x85, 0x39, 0x71, 0xd7, 0xed, 0x0b, 0x78, 0x5e, 0x11, 0xa5, 0x05, 0x77,
	0x39, 0xd8, 0x59, 0xe5, 0x13, 0xbc, 0x70, 0xe4, 0x1b, 0xcd, 0x58, 0x4a, 0x15, 0x3e, 0x51, 0xe7,
	0x1c, 0x06, 0x4d, 0x37, 0x2b, 0x96, 0xed, 0xae, 0x71, 0x09, 0xaf, 0x1c, 0xb9, 0x62, 0xea, 0xf6,
	0x2b, 0xc7, 0x87, 0x12, 0x13, 0x85, 0xe9, 0xd3, 0x1c, 0xcd, 0xaf, 0xa0, 0xef, 0xd3, 0x53, 0x3d,
	0xd5, 0x12, 0xfa, 0x8f, 0x23, 0x45, 0x5e, 0xd7, 0xcb, 0xff, 0xcb, 0xda, 0x78, 0x58, 0xb7, 0x1b,
	0xbd, 0xf9, 0x39, 0x04, 0x0b, 0xad, 0xea, 0x00, 0x9c, 0x42, 0xc7, 0x26, 0x87, 0xfc, 0x99, 0x6e,
	0x04, 0x72, 0xfc, 0x17, 0x75, 0xf9, 0xba, 0xee, 0xda, 0x7f, 0x9e, 0xd3, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x64, 0x26, 0xa5, 0x1b, 0x87, 0x04, 0x00, 0x00,
}
